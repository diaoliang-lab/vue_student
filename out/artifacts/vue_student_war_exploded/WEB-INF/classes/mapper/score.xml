<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 配置关于学生成绩表的 MyBatis映射文件 -->
<!-- namespace：必须与对应的接口全类名一致 id:必须与对应接口的某个对应的方法名一致 -->
<mapper namespace="com.dao.ScoreDAO">
	<resultMap type="score" id="scoreMap">
		<id property="scoreid" column="scoreid" />
		<result property="usersid" column="usersid" />
		<result property="courseid" column="courseid" />
		<result property="num" column="num" />
		<result property="addtime" column="addtime" />
		<result property="memo" column="memo" />
		<result property="realname" column="realname" />
		<result property="coursename" column="coursename" />
		<!-- 通过外键关联查询 返回封装Users对象 -->
		<association property="users" column="usersid" select="com.dao.UsersDAO.getUsersById" javaType="com.entity.Users" />
		<!-- 通过外键关联查询 返回封装Course对象 -->
		<association property="course" column="courseid" select="com.dao.CourseDAO.getCourseById" javaType="com.entity.Course" />
	</resultMap>

	<!-- 学生成绩表 插入SQL语句 ScoreDAO通过ID(insertScore)调用此配置 -->
	<insert id="insertScore" parameterType="score">
		insert into score(scoreid , usersid , courseid , num , addtime , memo ) values(#{scoreid} , #{usersid} , #{courseid} , #{num} , #{addtime} , #{memo} )
	</insert>

	<!-- 学生成绩表 更新SQL语句 ScoreDAO通过ID(updateScore)调用此配置 -->
	<update id="updateScore" parameterType="score">
		update score set usersid=#{usersid} , courseid=#{courseid} , num=#{num} , addtime=#{addtime} , memo=#{memo} where
		scoreid=#{scoreid}
	</update>

	<!-- 学生成绩表 按主键删除SQL语句 ScoreDAO通过ID(deleteScore)调用此配置 -->
	<delete id="deleteScore" parameterType="String">
		delete from score where scoreid = #{scoreid}
	</delete>

	<!-- 学生成绩表 查询全部学生成绩信息SQL语句 ScoreDAO通过ID(getAllScore)调用此配置 -->
	<select id="getAllScore" resultMap="scoreMap">
		select a.* , b.realname , c.coursename from score a , users b , course c where 1=1 and a.usersid = b.usersid and
		a.courseid = c.courseid order by scoreid desc
	</select>

	<!-- 学生成绩表 按主键(scoreid)查询SQL语句 ScoreDAO通过ID(getScoreById)调用此配置 -->
	<select id="getScoreById" parameterType="String" resultMap="scoreMap">
		select a.* , b.realname , c.coursename from score a , users b , course c where 1=1 and
		a.usersid = b.usersid and a.courseid = c.courseid and scoreid=#{scoreid} order by scoreid desc
	</select>

	<!-- 学生成绩表 按条件精确查询SQL语句 ScoreDAO通过ID(getScoreByCond)调用此配置 -->
	<select id="getScoreByCond" parameterType="score" resultMap="scoreMap">
		select a.* , b.realname , c.coursename from score a , users b , course c where 1=1 and a.usersid = b.usersid and a.courseid = c.courseid
		<if test="usersid != null and '' != usersid">
			and a.usersid = #{usersid}
		</if>
		<if test="courseid != null and '' != courseid">
			and a.courseid = #{courseid}
		</if>
		<if test="num != null and '' != num">
			and a.num = #{num}
		</if>
		<if test="addtime != null and '' != addtime">
			and a.addtime = #{addtime}
		</if>
		<if test="memo != null and '' != memo">
			and a.memo = #{memo}
		</if>
	</select>

	<!-- 学生成绩表 按条件模糊查询SQL语句 ScoreDAO通过ID(getScoreByLike)调用此配置 -->
	<select id="getScoreByLike" parameterType="score" resultMap="scoreMap">
		select a.* , b.realname , c.coursename from score a , users b , course c where 1=1 and a.usersid = b.usersid and a.courseid = c.courseid
		<if test="usersid != null and '' != usersid">
			and b.realname like CONCAT('%', CONCAT(#{usersid}, '%'))
		</if>
		<if test="courseid != null and '' != courseid">
			and c.coursename like CONCAT('%', CONCAT(#{courseid}, '%'))
		</if>
		<if test="num != null and '' != num">
			and a.num like CONCAT('%', CONCAT(#{num}, '%'))
		</if>
		<if test="addtime != null and '' != addtime">
			and a.addtime like CONCAT('%', CONCAT(#{addtime}, '%'))
		</if>
		<if test="memo != null and '' != memo">
			and a.memo like CONCAT('%', CONCAT(#{memo}, '%'))
		</if>
	</select>
</mapper>





























